--
-- Script was generated by Devart dbForge Studio for MySQL, Version 8.0.40.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 25/02/2021 10:52:40 AM
-- Server version: 8.0.19
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE qlts_fresher_core;

--
-- Drop procedure `Proc_DeleteDepartment`
--
DROP PROCEDURE IF EXISTS Proc_DeleteDepartment;

--
-- Drop procedure `Proc_InsertDepartment`
--
DROP PROCEDURE IF EXISTS Proc_InsertDepartment;

--
-- Drop procedure `Proc_SelectDepartmentById`
--
DROP PROCEDURE IF EXISTS Proc_SelectDepartmentById;

--
-- Drop procedure `Proc_SelectDepartments`
--
DROP PROCEDURE IF EXISTS Proc_SelectDepartments;

--
-- Drop procedure `Proc_UpdateDepartment`
--
DROP PROCEDURE IF EXISTS Proc_UpdateDepartment;

--
-- Drop table `department`
--
DROP TABLE IF EXISTS department;

--
-- Drop procedure `Proc_DeleteFACategory`
--
DROP PROCEDURE IF EXISTS Proc_DeleteFACategory;

--
-- Drop procedure `Proc_InsertFACategory`
--
DROP PROCEDURE IF EXISTS Proc_InsertFACategory;

--
-- Drop procedure `Proc_SelectFACategoryById`
--
DROP PROCEDURE IF EXISTS Proc_SelectFACategoryById;

--
-- Drop procedure `Proc_SelectFACategoryDatas`
--
DROP PROCEDURE IF EXISTS Proc_SelectFACategoryDatas;

--
-- Drop procedure `Proc_UpdateFACategory`
--
DROP PROCEDURE IF EXISTS Proc_UpdateFACategory;

--
-- Drop table `fixed_asset_category`
--
DROP TABLE IF EXISTS fixed_asset_category;

--
-- Drop procedure `Proc_DeleteFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_DeleteFixedAsset;

--
-- Drop procedure `Proc_InsertFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_InsertFixedAsset;

--
-- Drop procedure `Proc_SelectFixedAssetById`
--
DROP PROCEDURE IF EXISTS Proc_SelectFixedAssetById;

--
-- Drop procedure `Proc_SelectFixedAssetDatas`
--
DROP PROCEDURE IF EXISTS Proc_SelectFixedAssetDatas;

--
-- Drop procedure `Proc_UpdateFixedAsset`
--
DROP PROCEDURE IF EXISTS Proc_UpdateFixedAsset;

--
-- Drop table `fixed_asset`
--
DROP TABLE IF EXISTS fixed_asset;

--
-- Drop procedure `Proc_DeleteRefDecrement`
--
DROP PROCEDURE IF EXISTS Proc_DeleteRefDecrement;

--
-- Drop procedure `Proc_InsertRefDecrement`
--
DROP PROCEDURE IF EXISTS Proc_InsertRefDecrement;

--
-- Drop procedure `Proc_SelectRefDecrementById`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefDecrementById;

--
-- Drop procedure `Proc_SelectRefDecrementDatas`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefDecrementDatas;

--
-- Drop procedure `Proc_UpdateRefDecrement`
--
DROP PROCEDURE IF EXISTS Proc_UpdateRefDecrement;

--
-- Drop table `ref_decrement`
--
DROP TABLE IF EXISTS ref_decrement;

--
-- Drop procedure `Proc_DeleteRefDepreciation`
--
DROP PROCEDURE IF EXISTS Proc_DeleteRefDepreciation;

--
-- Drop procedure `Proc_InsertRefDepreciation`
--
DROP PROCEDURE IF EXISTS Proc_InsertRefDepreciation;

--
-- Drop procedure `Proc_SelectRefDepreciationById`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefDepreciationById;

--
-- Drop procedure `Proc_SelectRefDepreciationDatas`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefDepreciationDatas;

--
-- Drop procedure `Proc_UpdateRefDepreciation`
--
DROP PROCEDURE IF EXISTS Proc_UpdateRefDepreciation;

--
-- Drop table `ref_depreciation`
--
DROP TABLE IF EXISTS ref_depreciation;

--
-- Drop procedure `Proc_DeleteRefTransfer`
--
DROP PROCEDURE IF EXISTS Proc_DeleteRefTransfer;

--
-- Drop procedure `Proc_InsertRefTransfer`
--
DROP PROCEDURE IF EXISTS Proc_InsertRefTransfer;

--
-- Drop procedure `Proc_SelectRefTransferById`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefTransferById;

--
-- Drop procedure `Proc_SelectRefTransferDatas`
--
DROP PROCEDURE IF EXISTS Proc_SelectRefTransferDatas;

--
-- Drop procedure `Proc_UpdateRefTransfer`
--
DROP PROCEDURE IF EXISTS Proc_UpdateRefTransfer;

--
-- Drop table `ref_transfer`
--
DROP TABLE IF EXISTS ref_transfer;

--
-- Set default database
--
USE qlts_fresher_core;

--
-- Create table `ref_transfer`
--
CREATE TABLE ref_transfer (
  ref_transfer_id varchar(36) NOT NULL COMMENT 'ID chứng từ',
  organization_id varchar(36) NOT NULL COMMENT 'Thuộc đơn vị',
  ref_no varchar(50) NOT NULL COMMENT 'Số chứng từ',
  ref_type int NOT NULL COMMENT 'Loại chứng từ',
  ref_date date NOT NULL COMMENT 'Ngày chứng từ, (CT tính hao mòn: là ngày cuối kỳ)',
  ref_detail longtext NOT NULL COMMENT 'Chi tiết danh sách tài sản của chứng từ',
  journal_memo varchar(255) DEFAULT NULL COMMENT 'Diễn giải',
  posted_date date NOT NULL COMMENT 'Ngày thực hiện điều chuyển....',
  tracked_year int NOT NULL COMMENT 'Năm làm việc ~ năm chứng từ',
  created_by varchar(50) NOT NULL COMMENT 'Người tạo',
  created_date datetime NOT NULL COMMENT 'Ngày tạo',
  modified_by varchar(50) NOT NULL COMMENT 'Người sửa',
  modified_date datetime NOT NULL COMMENT 'Ngày sửa',
  PRIMARY KEY (ref_transfer_id)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Điều chuyển phòng ban';

DELIMITER $$

--
-- Create procedure `Proc_UpdateRefTransfer`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateRefTransfer (IN $RefTransferId char(36), IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date)
BEGIN

  UPDATE ref_transfer rt
  SET rt.ref_no = $RefNo,
      rt.ref_detail = $RefDetail,
      rt.journal_memo = $JournalMemo,
      rt.posted_date = $PostedDate
  WHERE rt.ref_transfer_id = $RefTransferId;


END
$$

--
-- Create procedure `Proc_SelectRefTransferDatas`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefTransferDatas ()
COMMENT 'Lấy danh sách chứng từ điều chuyển'
BEGIN

  SELECT
    *
  FROM ref_transfer rt;

END
$$

--
-- Create procedure `Proc_SelectRefTransferById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefTransferById (IN $RefTransferId char(36))
COMMENT 'Lấy chứng từ điều chuyển theo Id'
BEGIN

  SELECT
    rt.ref_transfer_id,
    rt.ref_no,
    rt.ref_type,
    rt.ref_date,
    rt.ref_detail,
    rt.journal_memo,
    rt.posted_date,
    rt.tracked_year,
    rt.created_by,
    rt.created_date,
    rt.modified_by,
    rt.modified_date
  FROM ref_transfer rt
  WHERE rt.ref_transfer_id = $RefTransferId;

END
$$

--
-- Create procedure `Proc_InsertRefTransfer`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertRefTransfer (IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date)
COMMENT 'Thêm chứng từ điều chuyển'
BEGIN

  -- Kiểm tra xem tồn tại bản ghi theo số chứng từ chưa
  IF NOT EXISTS (SELECT
        *
      FROM ref_transfer rt
      WHERE rt.ref_no = $RefNo) THEN

    INSERT INTO ref_transfer (ref_transfer_id, ref_no, ref_date, ref_detail, journal_memo, posted_date, created_date, modified_date)
      VALUES (UUID(), $RefNo, CURDATE(), $RefDetail, $JournalMemo, $PostedDate, NOW(), NULL);

  END IF;

END
$$

--
-- Create procedure `Proc_DeleteRefTransfer`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteRefTransfer (IN $RefTransferId char(36))
COMMENT 'Xóa chứng từ điều chuyển'
BEGIN

  DELETE ref_transfer
    FROM ref_transfer
  WHERE ref_transfer_id = $RefTransferId;

END
$$

DELIMITER ;

--
-- Create table `ref_depreciation`
--
CREATE TABLE ref_depreciation (
  ref_depreciation_id varchar(36) NOT NULL COMMENT 'ID chứng từ',
  organization_id varchar(36) NOT NULL COMMENT 'Thuộc đơn vị',
  ref_no varchar(50) NOT NULL COMMENT 'Số chứng từ',
  ref_type int NOT NULL COMMENT 'Loại chứng từ',
  ref_date date NOT NULL COMMENT 'Ngày chứng từ - tính hao mòn: là ngày cuối kỳ)',
  ref_detail longtext NOT NULL COMMENT 'Chi tiết danh sách tài sản của chứng từ',
  journal_memo varchar(255) DEFAULT NULL COMMENT 'Diễn giải',
  posted_date date NOT NULL COMMENT 'Ngày tính hao mòn',
  period_type int NOT NULL COMMENT 'Theo giá trị của cbo của control RangerDate. 0: Năm, 3->6: Quý 1->4, 7->18: Tháng 1->12',
  tracked_year int NOT NULL COMMENT 'Năm làm việc ~ năm chứng từ',
  amount_total decimal(20, 4) NOT NULL COMMENT 'Tổng giá trị tính hao mòn',
  created_by varchar(50) NOT NULL COMMENT 'Người tạo',
  created_date datetime NOT NULL COMMENT 'Ngày tạo',
  modified_by varchar(50) NOT NULL COMMENT 'Người sửa',
  modified_date datetime NOT NULL COMMENT 'Ngày sửa',
  PRIMARY KEY (ref_depreciation_id)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Tính hao mòn';

DELIMITER $$

--
-- Create procedure `Proc_UpdateRefDepreciation`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateRefDepreciation (IN $RefDepreciationId char(36), IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date, IN $AmountTotal decimal(20, 4))
COMMENT 'Cập nhật chứng từ tính hao mòn'
BEGIN

  UPDATE ref_depreciation rd
  SET rd.ref_no = $RefNo,
      rd.ref_detail = $RefDetail,
      rd.journal_memo = $JournalMemo,
      rd.posted_date = $PostedDate,
      rd.amount_total = $AmountTotal
  WHERE rd.ref_depreciation_id = $RefDepreciationId;

END
$$

--
-- Create procedure `Proc_SelectRefDepreciationDatas`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefDepreciationDatas ()
COMMENT 'Lấy danh sách chứng từ tính hao mòn'
BEGIN

  SELECT
    *
  FROM ref_depreciation rd;

END
$$

--
-- Create procedure `Proc_SelectRefDepreciationById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefDepreciationById (IN $RefDepreciationId char(36))
COMMENT 'Lấy chứng từ tính hao mòn theo Id'
BEGIN

  SELECT
    rd.ref_depreciation_id,
    rd.ref_no,
    rd.ref_type,
    rd.ref_date,
    rd.ref_detail,
    rd.journal_memo,
    rd.posted_date,
    rd.period_type,
    rd.tracked_year,
    rd.amount_total,
    rd.created_by,
    rd.created_date,
    rd.modified_by,
    rd.modified_date
  FROM ref_depreciation rd
  WHERE rd.ref_depreciation_id = $RefDepreciationId;

END
$$

--
-- Create procedure `Proc_InsertRefDepreciation`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertRefDepreciation (IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date, IN $AmountTotal decimal(20, 4))
COMMENT 'Thêm chứng từ tính hao mòn'
BEGIN

  IF NOT EXISTS (SELECT
        *
      FROM ref_depreciation rd
      WHERE rd.ref_no = $RefNo) THEN

    INSERT INTO ref_depreciation (ref_depreciation_id, ref_no, ref_date, ref_detail, journal_memo, posted_date, amount_total, created_date, modified_date)
      VALUES (UUID(), $RefNo, CURDATE(), $RefDetail, $JournalMemo, $PostedDate, $AmountTotal, NOW(), NULL);

  END IF;

END
$$

--
-- Create procedure `Proc_DeleteRefDepreciation`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteRefDepreciation (IN $RefDepreciationId char(36))
COMMENT 'Xóa chứng từ tính hao mòn'
BEGIN

  DELETE ref_depreciation
    FROM ref_depreciation
  WHERE ref_depreciation_id = $RefDepreciationId;

END
$$

DELIMITER ;

--
-- Create table `ref_decrement`
--
CREATE TABLE ref_decrement (
  ref_decrement_id varchar(36) NOT NULL COMMENT 'ID chứng từ',
  organization_id varchar(36) NOT NULL COMMENT 'Thuộc đơn vị',
  ref_no varchar(50) NOT NULL COMMENT 'Số chứng từ',
  ref_type int NOT NULL COMMENT 'Loại chứng từ',
  ref_date date NOT NULL COMMENT 'Ngày chứng từ',
  ref_detail longtext NOT NULL COMMENT 'Chi tiết danh sách tài sản của chứng từ',
  journal_memo varchar(255) DEFAULT NULL COMMENT 'Diễn giải',
  posted_date date NOT NULL COMMENT 'Ngày ghi giảm',
  tracked_year int NOT NULL COMMENT 'Năm làm việc ~ năm chứng từ',
  cost_total decimal(20, 4) NOT NULL COMMENT 'Tổng nguyên giá',
  created_by varchar(50) NOT NULL COMMENT 'Người tạo',
  created_date datetime NOT NULL COMMENT 'Ngày tạo',
  modified_by varchar(50) NOT NULL COMMENT 'Người sửa',
  modified_date datetime NOT NULL COMMENT 'Ngày sửa',
  PRIMARY KEY (ref_decrement_id)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Ghi giảm';

DELIMITER $$

--
-- Create procedure `Proc_UpdateRefDecrement`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateRefDecrement (IN $RefDecrementId char(36), IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date, IN $CostTotal decimal(20, 4))
COMMENT 'Cập nhật chứng từ ghi giảm'
BEGIN

  UPDATE ref_decrement rd
  SET rd.ref_no = $RefNo,
      rd.ref_detail = $RefDetail,
      rd.journal_memo = $JournalMemo,
      rd.posted_date = $PostedDate,
      rd.cost_total = $CostTotal
  WHERE rd.ref_decrement_id = $RefDecrementId;

END
$$

--
-- Create procedure `Proc_SelectRefDecrementDatas`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefDecrementDatas ()
COMMENT 'Lấy danh sách chứng từ ghi giảm'
BEGIN

  SELECT
    rd.ref_decrement_id,
    rd.ref_no,
    rd.ref_type,
    rd.ref_date,
    rd.ref_detail,
    rd.journal_memo,
    rd.posted_date,
    rd.tracked_year,
    rd.cost_total
  FROM ref_decrement rd;

END
$$

--
-- Create procedure `Proc_SelectRefDecrementById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectRefDecrementById (IN $RefDecrementId char(36))
COMMENT 'Lấy chứng từ ghi giảm theo Id'
BEGIN

  SELECT
    rd.ref_decrement_id,
    rd.ref_no,
    rd.ref_type,
    rd.ref_date,
    rd.ref_detail,
    rd.journal_memo,
    rd.posted_date,
    rd.tracked_year,
    rd.cost_total,
    rd.created_by,
    rd.created_date,
    rd.modified_by,
    rd.modified_date
  FROM ref_decrement rd
  WHERE rd.ref_decrement_id = $RefDecrementId;

END
$$

--
-- Create procedure `Proc_InsertRefDecrement`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertRefDecrement (IN $RefNo varchar(50), IN $RefDetail longtext, IN $JournalMemo varchar(255), IN $PostedDate date, IN $CostTotal decimal(20, 4))
COMMENT 'Thêm chứng từ ghi giảm'
BEGIN

  IF NOT EXISTS (SELECT
        *
      FROM ref_decrement rd
      WHERE rd.ref_no = $RefNo) THEN

    INSERT INTO ref_decrement (ref_decrement_id, ref_no, ref_date, ref_detail, journal_memo, posted_date, cost_total, created_date, modified_date)
      VALUES (UUID(), '', CURDATE(), $RefDetail, $JournalMemo, $PostedDate, $CostTotal, NOW(), NULL);
  END IF;

END
$$

--
-- Create procedure `Proc_DeleteRefDecrement`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteRefDecrement (IN $RefDecrementId char(36))
COMMENT 'Xóa chứng từ ghi giảm'
BEGIN

  DELETE ref_decrement
    FROM ref_decrement
  WHERE ref_decrement_id = $RefDecrementId;

END
$$

DELIMITER ;

--
-- Create table `fixed_asset`
--
CREATE TABLE fixed_asset (
  fixed_asset_id char(36) NOT NULL COMMENT 'Id tài sản',
  fixed_asset_code varchar(100) DEFAULT NULL COMMENT 'Mã tài sản',
  fixed_asset_name varchar(255) DEFAULT NULL COMMENT 'Tên tài sản',
  organization_id char(36) DEFAULT NULL COMMENT 'Id của đơn vị',
  organization_code varchar(50) DEFAULT NULL COMMENT 'Mã đơn vị',
  organization_name varchar(255) DEFAULT NULL COMMENT 'Tên của đơn vị',
  department_id char(36) DEFAULT NULL COMMENT 'Id phòng ban',
  department_code varchar(50) DEFAULT NULL COMMENT 'Mã phòng ban',
  department_name varchar(255) DEFAULT NULL,
  fixed_asset_category_id char(36) DEFAULT NULL COMMENT 'Id loại tài sản',
  fixed_asset_category_code varchar(50) DEFAULT NULL COMMENT 'Mã loại tài sản',
  fixed_asset_category_name varchar(255) DEFAULT NULL COMMENT 'Tên loại tài sản',
  increment_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày ghi tăng tài sản',
  cost decimal(19, 4) DEFAULT NULL COMMENT 'nguyên giá',
  quantity int DEFAULT 0 COMMENT 'Số lượng',
  depreciation_rate float DEFAULT NULL COMMENT 'Tỷ lệ hao mòn (%)',
  depreciation_year_price decimal(19, 4) DEFAULT NULL COMMENT 'Giá trị hao mòn năm',
  tracked_year int DEFAULT NULL COMMENT 'Năm bắt đầu theo dõi tài sản trên phần mềm',
  life_time int DEFAULT NULL COMMENT 'Số năm sử dụng ',
  production_year int DEFAULT NULL COMMENT 'Năm sử dụng',
  active bit(1) DEFAULT b'0' COMMENT 'Sử dụng',
  created_by varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  created_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  modified_by varchar(50) DEFAULT NULL COMMENT 'Người sửa',
  modified_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (fixed_asset_id)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Bảng danh sách tài sản (Sử dụng cho fresher HCSN - đưa về chung với bảng Ghi tăng tài sản) => Danh mục: Danh sách tài sản';

--
-- Create index `UK_fixed_asset_fixed_asset_cod` on table `fixed_asset`
--
ALTER TABLE fixed_asset
ADD UNIQUE INDEX UK_fixed_asset_fixed_asset_cod (fixed_asset_code);

DELIMITER $$

--
-- Create procedure `Proc_UpdateFixedAsset`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateFixedAsset (IN $FixedAssetId varchar(36), IN $FixedAssetCode varchar(100), IN $FixedAssetName varchar(255), IN $DepartmentId char(36), IN $DepartmentCode varchar(50), IN $DepartmentName varchar(255), IN $FixedAssetCategoryId char(36), IN $FixedAssetCategoryCode varchar(50), IN $FixedAssetCategoryName varchar(255), IN $IncrementDate timestamp, IN $Cost decimal(19, 4), IN $DepreciationRate float, IN $DepreciationYearPrice decimal(19, 4), IN $LifeTime int, IN $Active bit(1))
COMMENT 'Thêm tài sản'
BEGIN

  UPDATE fixed_asset
  SET fixed_asset_code = $FixedAssetCode,
      fixed_asset_name = $FixedAssetName,
      department_id = $DepartmentId,
      department_code = $DepartmentCode,
      department_name = $DepartmentName,
      fixed_asset_category_id = $FixedAssetCategoryId,
      fixed_asset_category_code = $FixedAssetCategoryCode,
      fixed_asset_category_name = $FixedAssetCategoryName,
      increment_date = $IncrementDate,
      cost = $Cost,
      depreciation_rate = $DepreciationRate,
      depreciation_year_price = $DepreciationYearPrice,
      life_time = $LifeTime,
      active = $Active,
      modified_date = NOW()
  WHERE fixed_asset_id = $FixedAssetId;

END
$$

--
-- Create procedure `Proc_SelectFixedAssetDatas`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectFixedAssetDatas ()
COMMENT 'Lấy danh sách tài sản'
BEGIN

  SELECT
    *
  FROM fixed_asset fa;

END
$$

--
-- Create procedure `Proc_SelectFixedAssetById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectFixedAssetById (IN $FixedAssetId char(36))
COMMENT 'Lấy tài sản theo id'
BEGIN

  SELECT
    *
  FROM fixed_asset fa
  WHERE fa.fixed_asset_id = $FixedAssetId;

END
$$

--
-- Create procedure `Proc_InsertFixedAsset`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertFixedAsset (IN $FixedAssetCode varchar(100), IN $FixedAssetName varchar(255), IN $DepartmentId char(36), IN $DepartmentCode varchar(50), IN $DepartmentName varchar(255), IN $FixedAssetCategoryId char(36), IN $FixedAssetCategoryCode varchar(50), IN $FixedAssetCategoryName varchar(255), IN $IncrementDate timestamp, IN $Cost decimal(19, 4), IN $DepreciationRate float, IN $DepreciationYearPrice decimal(19, 4), IN $LifeTime int, IN $Active bit(1))
COMMENT 'Thêm tài sản'
BEGIN


  -- Kiểm tra xem đã tồn tại theo mã chưa rồi mới insert
  IF NOT EXISTS (SELECT
        *
      FROM fixed_asset fa
      WHERE fa.fixed_asset_code = $FixedAssetCode) THEN


    INSERT INTO fixed_asset (fixed_asset_id,
    fixed_asset_code,
    fixed_asset_name,
    department_id,
    department_code,
    department_name,
    fixed_asset_category_id,
    fixed_asset_category_code,
    fixed_asset_category_name,
    increment_date,
    cost,
    depreciation_rate,
    depreciation_year_price,
    life_time,
    active,
    created_date,
    modified_date)
      VALUES (UUID(), $FixedAssetCode, $FixedAssetName, $DepartmentId, $DepartmentCode, $DepartmentName, $FixedAssetCategoryId, $FixedAssetCategoryCode, $FixedAssetCategoryName, $IncrementDate, $Cost, $DepreciationRate, $DepreciationYearPrice, $LifeTime, $Active, NOW(), NULL);

  END IF;

END
$$

--
-- Create procedure `Proc_DeleteFixedAsset`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteFixedAsset (IN $FixedAssetId char(36))
COMMENT 'Xóa tài sản'
BEGIN

  DELETE fixed_asset
    FROM fixed_asset
  WHERE fixed_asset_id = $FixedAssetId;

END
$$

DELIMITER ;

--
-- Create table `fixed_asset_category`
--
CREATE TABLE fixed_asset_category (
  fixed_asset_category_id char(36) NOT NULL COMMENT 'Id loại tài sản',
  fixed_asset_category_code varchar(50) DEFAULT NULL COMMENT 'Mã loại tài sản',
  fixed_asset_category_name varchar(255) DEFAULT NULL COMMENT 'Tên loại tài sản',
  organization_id char(36) DEFAULT NULL COMMENT 'Id của đơn vị',
  depreciation_rate float DEFAULT NULL COMMENT 'Tỷ lệ hao mòn (%)',
  life_time int DEFAULT NULL COMMENT 'Số năm sử dụng ',
  description varchar(500) DEFAULT NULL COMMENT 'Ghi chú',
  created_by varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  created_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  modified_by varchar(50) DEFAULT NULL COMMENT 'Người sửa',
  modified_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (fixed_asset_category_id)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Loại tài sản';

DELIMITER $$

--
-- Create procedure `Proc_UpdateFACategory`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateFACategory (IN $FixedAssetCategoryId char(36), IN $FixedAssetCategoryCode varchar(50), IN $FixedAssetCategoryName varchar(255), IN $DepreciationRate float, IN $LifeTime int, IN $Description varchar(500))
COMMENT 'Thêm mới loại tài sản'
BEGIN

  UPDATE fixed_asset_category fac
  SET fac.fixed_asset_category_code = $FixedAssetCategoryCode,
      fac.fixed_asset_category_name = $FixedAssetCategoryName,
      fac.depreciation_rate = $DepreciationRate,
      fac.life_time = $LifeTime,
      fac.description = $Description,
      fac.modified_date = NOW()
  WHERE fac.fixed_asset_category_id = $FixedAssetCategoryId;

END
$$

--
-- Create procedure `Proc_SelectFACategoryDatas`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectFACategoryDatas ()
COMMENT 'Lấy danh sách danh mục Loại tài sản cố định'
BEGIN

  SELECT
    *
  FROM fixed_asset_category fac;

END
$$

--
-- Create procedure `Proc_SelectFACategoryById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectFACategoryById (IN $FixedAssetCategoryId char(36))
COMMENT 'Lấy loại tài sản theo Id'
BEGIN

  SELECT
    *
  FROM fixed_asset_category fac
  WHERE fac.fixed_asset_category_id = $FixedAssetCategoryId;

END
$$

--
-- Create procedure `Proc_InsertFACategory`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertFACategory (IN $FixedAssetCategoryCode varchar(50), IN $FixedAssetCategoryName varchar(255), IN $DepreciationRate float, IN $LifeTime int, IN $Description varchar(500))
COMMENT 'Thêm mới loại tài sản'
BEGIN


  -- Kiểm tra xem đã tồn tại theo mã chưa rồi mới insert
  IF NOT EXISTS (SELECT
        *
      FROM fixed_asset_category fac
      WHERE fac.fixed_asset_category_code = $FixedAssetCategoryCode) THEN

    INSERT INTO fixed_asset_category (fixed_asset_category_id, fixed_asset_category_code, fixed_asset_category_name, depreciation_rate, life_time, description, created_date, modified_date)
      VALUES (UUID(), $FixedAssetCategoryCode, $FixedAssetCategoryName, $DepreciationRate, $LifeTime, $Description, NOW(), NULL);
  END IF;

END
$$

--
-- Create procedure `Proc_DeleteFACategory`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteFACategory (IN $FixedAssetCategoryId char(36))
COMMENT 'Xóa loại tài sản'
BEGIN

  DELETE fixed_asset_category
    FROM fixed_asset_category
  WHERE fixed_asset_category_id = $FixedAssetCategoryId;

END
$$

DELIMITER ;

--
-- Create table `department`
--
CREATE TABLE department (
  department_id char(36) NOT NULL,
  department_code varchar(50) DEFAULT NULL COMMENT 'Mã của phòng ban',
  department_name varchar(255) DEFAULT NULL COMMENT 'Tên phòng ban',
  description varchar(500) DEFAULT NULL COMMENT 'Ghi chú',
  is_parent bit(1) DEFAULT NULL COMMENT 'Có phải là cha không',
  parent_id char(36) DEFAULT NULL COMMENT 'Id phòng ban cha',
  parent_name varchar(255) DEFAULT NULL COMMENT 'Tên phòng ban cha',
  organization_id char(36) DEFAULT NULL COMMENT 'Id của đơn vị',
  created_by varchar(50) DEFAULT NULL COMMENT 'Người tạo',
  created_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày tạo',
  modified_by varchar(50) DEFAULT NULL COMMENT 'Người sửa',
  modified_date timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Ngày sửa',
  PRIMARY KEY (department_id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Danh mục phòng ban';

DELIMITER $$

--
-- Create procedure `Proc_UpdateDepartment`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_UpdateDepartment (IN $DepartmentId char(36), IN $DepartmentCode varchar(50), IN $DepartmentName varchar(255), IN $Description varchar(500), IN $ParentId char(36), IN $ParentName varchar(255))
COMMENT 'Sửa phòng ban'
BEGIN

  UPDATE department d
  SET d.department_code = $DepartmentCode,
      d.department_name = $DepartmentName,
      d.description = $Description,
      d.parent_id = $ParentId,
      d.parent_name = $ParentName,
      d.modified_date = NOW()
  WHERE d.department_id = $DepartmentId;

END
$$

--
-- Create procedure `Proc_SelectDepartments`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectDepartments ()
COMMENT 'Lấy dữ liệu danh sách Phòng ban'
BEGIN

  SELECT
    *
  FROM department d;

END
$$

--
-- Create procedure `Proc_SelectDepartmentById`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_SelectDepartmentById (IN $DepartmentId char(36))
COMMENT 'Lấy dữ liệu phòng ban theo Id phòng ban'
BEGIN

  SELECT
    d.department_id,
    d.department_code,
    d.department_name,
    d.description,
    d.is_parent,
    d.parent_id,
    d.organization_id,
    d.created_by,
    d.created_date,
    d.modified_by,
    d.modified_date
  FROM department d
  WHERE d.department_id = $DepartmentId;
END
$$

--
-- Create procedure `Proc_InsertDepartment`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_InsertDepartment (IN $DepartmentCode varchar(50), IN $DepartmentName varchar(255), IN $Description varchar(500), IN $ParentId char(36), IN $ParentName varchar(255))
COMMENT 'Thêm mới phòng ban'
BEGIN

  -- Kiểm tra xem đã tồn tại theo mã chưa rồi mới insert
  IF NOT EXISTS (SELECT
        *
      FROM department d
      WHERE d.department_code = $DepartmentCode) THEN

    INSERT INTO department (department_id, department_code, department_name, description, parent_id, parent_name, created_date, modified_date)
      VALUES (UUID(), $DepartmentCode, $DepartmentName, $Description, $ParentId, $ParentName, NOW(), NULL);
  END IF;

END
$$

--
-- Create procedure `Proc_DeleteDepartment`
--
CREATE DEFINER = 'mbest'@'%'
PROCEDURE Proc_DeleteDepartment (IN $DepartmentId char(36))
COMMENT 'Xóa phòng ban'
BEGIN

  DELETE department
    FROM department
  WHERE department_id = $DepartmentId;

END
$$

DELIMITER ;

-- 
-- Dumping data for table ref_transfer
--
-- Table qlts_fresher_core.ref_transfer does not contain any data (it is empty)

-- 
-- Dumping data for table ref_depreciation
--
-- Table qlts_fresher_core.ref_depreciation does not contain any data (it is empty)

-- 
-- Dumping data for table ref_decrement
--
-- Table qlts_fresher_core.ref_decrement does not contain any data (it is empty)

-- 
-- Dumping data for table fixed_asset_category
--
-- Table qlts_fresher_core.fixed_asset_category does not contain any data (it is empty)

-- 
-- Dumping data for table fixed_asset
--
-- Table qlts_fresher_core.fixed_asset does not contain any data (it is empty)

-- 
-- Dumping data for table department
--
INSERT INTO department VALUES
('2f5a5c4f-765a-11eb-b46e-005056beddb8', 'PB03', 'Phòng giám đốc 02', '', False, NULL, NULL, NULL, 'dthieu1', '2021-02-24 11:38:47', NULL, NULL),
('eaf83e54-7658-11eb-b46e-005056beddb8', 'PB02', 'Phòng giám đốc 02', '', False, NULL, NULL, NULL, 'dthieu1', '2021-02-24 11:29:43', NULL, '2021-02-24 11:32:14');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;